type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/MachineOfCoffee.java
  visible: true
  text: |+
    package machine;

    public class MachineOfCoffee extends Coffee {
        private int milkV = 0;
        private int waterV = 0;
        private int coffeeM = 0;
        private int disposableCups = 0;
        private int storedMoney = 0;

        MachineOfCoffee(int waterV, int milkV, int coffeeM, int disposableCups, int storedMoney) {
            this.waterV = waterV;
            this.milkV = milkV;
            this.coffeeM = coffeeM;
            this.disposableCups = disposableCups;
            this.storedMoney = storedMoney;
        }

        public int getWaterV() {
            return waterV;
        }
        public void setWaterV(int waterV) {
            this.waterV = waterV;
        }

        public int getMilkV() {
            return milkV;
        }
        public void setMilkV(int milkV) {
            this.milkV = milkV;
        }

        public int getCoffeeM() {
            return coffeeM;
        }
        public void setCoffeeM(int coffeeM) {
            this.coffeeM = coffeeM;
        }

        public int getDisposableCups() {
            return disposableCups;
        }
        public void setDisposableCups(int disposableCups) {
            this.disposableCups = disposableCups;
        }

        public int getStoredMoney() {
            return storedMoney;
        }
        public void setStoredMoney(int storedMoney) {
            this.storedMoney = storedMoney;
        }

        public boolean canMakeCoffee(CoffeeType coffeeType, int wantedCups) {
            boolean canMakeCoffee = true;
    //        int cupsAvailable = Integer.MAX_VALUE;
    //        cupsAvailable = waterV / coffeeType.getWaterV();
    //        if (coffeeType != CoffeeType.ESPRESSO) {
    //            cupsAvailable = Math.min(cupsAvailable, milkV / coffeeType.getMilkV());
    //        }
    //        cupsAvailable = Math.min(cupsAvailable, coffeeM / coffeeType.getCoffeeM());
    //        if (cupsAvailable < wantedCups) {
    //            canMakeCoffee = false;
    //        }

            if (waterV / coffeeType.getWaterV() < 1) {
                canMakeCoffee = false;
                System.out.println("Sorry, not enough water!");
            }
            if (coffeeType != CoffeeType.ESPRESSO) {
                if (milkV / coffeeType.getMilkV() < 1) {
                    canMakeCoffee = false;
                    System.out.println("Sorry, not enough milk!");
                }
            }
            if (coffeeM / coffeeType.getCoffeeM() < 1) {
                canMakeCoffee = false;
                System.out.println("Sorry, not enough coffee!");
            }
            if (disposableCups < 1){
                canMakeCoffee = false;
                System.out.println("Sorry, not enough cups!");
            }

            return canMakeCoffee;
        }
    }

  learner_created: true
- name: src/machine/Coffee.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public abstract class Coffee {
        final static Scanner scanner;
        static {
            scanner = new Scanner(System.in);
        }

        static void calcIngredients(){
            System.out.println("Write how many cups of coffee you will need:");
            int cupsNum = scanner.nextInt();
            System.out.println("For 25 cups of coffee you will need:");
            System.out.println(cupsNum * 200 + " ml of water");
            System.out.println(cupsNum * 50 + " ml of milk");
            System.out.println(cupsNum * 15 + " g of coffee beans");
        }

        static void calcNumberOfServings(){
            System.out.println("Write how many ml of water the coffee machine has:");
            int milkV = 0;
            int waterV = 0;
            int coffeeM = 0;
            int wantedCups = 0;
            try{
                waterV = Integer.parseInt(scanner.nextLine().trim());
                System.out.println("Write how many ml of milk the coffee machine has: ");
                milkV = Integer.parseInt(scanner.nextLine().trim());
                System.out.println("Write how many grams of coffee beans the coffee machine has: ");
                coffeeM = Integer.parseInt(scanner.nextLine().trim());
                System.out.println("Write how many cups of coffee you will need: ");
                wantedCups = Integer.parseInt(scanner.nextLine().trim());
            }
            catch (IllegalArgumentException e){
                System.out.println("please enter a number");
            }

            int cupsAvailable = waterV / 200;
            cupsAvailable = Math.min(cupsAvailable, milkV / 50);
            cupsAvailable = Math.min(cupsAvailable, coffeeM / 15);

            if (cupsAvailable == wantedCups){
                System.out.println("Yes, I can make that amount of coffee\n");
            }
            else if (cupsAvailable < wantedCups){
                System.out.println("No, I can make only " + cupsAvailable + " cup(s) of coffee");
            }
            else {
                System.out.println("Yes, I can make that amount of coffee (and even " +
                        (cupsAvailable - wantedCups) + " more than that)");
            }
        }

    }
  learner_created: true
- name: src/machine/CoffeeType.java
  visible: true
  text: |
    package machine;

    public enum CoffeeType {
        ESPRESSO(250, 0, 16, 4),
        LATTE(350, 75, 20, 7),
        CAPPUCCINO(200, 100, 12, 6),
        WRONGTYPE(0, 0, 0, 0);

        int milkV;
        int waterV;
        int coffeeM;
        int cost;

        CoffeeType(int waterV,int milkV, int coffeeM, int cost) {
            this.milkV = milkV;
            this.waterV = waterV;
            this.coffeeM = coffeeM;
            this.cost = cost;
        }

        public int getWaterV() {
            return waterV;
        }

        public int getMilkV() {
            return milkV;
        }

        public int getCoffeeM() {
            return coffeeM;
        }

        public int getCost() {
            return cost;
        }
    }
  learner_created: true
- name: src/machine/Print.java
  visible: true
  text: |
    package machine;

    public class Print {
        static void printInstructions(){
            System.out.println("Starting to make a coffee\n" +
                    "Grinding coffee beans\n" +
                    "Boiling water\n" +
                    "Mixing boiled water with crushed coffee beans\n" +
                    "Pouring coffee into the cup\n" +
                    "Pouring some milk into the cup\n" +
                    "Coffee is ready!");
        }

        static void printMachineStatus(MachineOfCoffee machine){
            System.out.println();
            System.out.println("The coffee machine has:");
            System.out.println(machine.getWaterV() + " ml of water");
            System.out.println(machine.getMilkV() + " ml of milk");
            System.out.println(machine.getCoffeeM() + " g of coffee beans");
            System.out.println(machine.getDisposableCups() + " disposable cups");
            System.out.println("$" +machine.getStoredMoney() + " of money");
        }
    }
  learner_created: true
- name: src/machine/Action.java
  visible: true
  text: |
    package machine;

    public enum Action {
        BUY,
        FILL,
        TAKE,
        REMAINING,
        EXIT,
        WRONGACTION;
    }
  learner_created: true
- name: src/machine/RunMachine.java
  visible: true
  text: |
    package machine;
    import java.util.Locale;
    import java.util.Scanner;

    import static machine.Coffee.calcIngredients;
    import static machine.Coffee.calcNumberOfServings;
    import static machine.Print.printMachineStatus;

    public class RunMachine {
        final static private Scanner scanner;
        static {
            scanner = new Scanner(System.in);
        }
        static boolean start(MachineOfCoffee machine){
            boolean isContinue = true;
            System.out.println();
            System.out.println("Write action (buy, fill, take, remaining, exit):");
            String inputAction = scanner.nextLine().trim().toUpperCase();
            Action action = Action.WRONGACTION;
            try {
                action = Action.valueOf(inputAction);
            }
            catch (IllegalArgumentException e){
                System.out.println("check input");
            }

            switch (action){
                case BUY:
                    Buy(machine);
                    break;
                case FILL:
                    Fill(machine);
                    break;
                case TAKE:
                    Take(machine);
                    break;
                case REMAINING:
                    printMachineStatus(machine);
                    break;
                case EXIT:
                    isContinue = false;
                    break;
                case WRONGACTION:
                    break;
                default:
                    break;
            }

            return isContinue;
        }

        private static void Buy(MachineOfCoffee machine){
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:");
            String input = scanner.nextLine().trim().toLowerCase();
            if (input.equals("back")){
                start(machine);
            }
            int option = 0;
            try {
                option = Integer.parseInt(input);
            }
            catch (IllegalArgumentException e){
                System.out.println("enter a number");
            }
            switch (option){
                case 1:
                    tryBuyCoffee(machine, CoffeeType.ESPRESSO, 1);
                    break;
                case 2:
                    tryBuyCoffee(machine, CoffeeType.LATTE, 1);
                    break;
                case 3:
                    tryBuyCoffee(machine, CoffeeType.CAPPUCCINO, 1);
                    break;
                default:
                    break;
            }
        }
        private static void tryBuyCoffee(MachineOfCoffee machine, CoffeeType coffeeType, int wantedCups){
            wantedCups = 1;
            if (machine.canMakeCoffee(coffeeType, wantedCups)){
                buyCoffee(machine, coffeeType, wantedCups);
                System.out.println("I have enough resources, making you a coffee!");
            }
        }
        private static void buyCoffee(MachineOfCoffee machine, CoffeeType coffeeType, int wantedCups){
            machine.setWaterV(machine.getWaterV() - wantedCups * coffeeType.getWaterV());
            machine.setMilkV(machine.getMilkV() - wantedCups * coffeeType.getMilkV());
            machine.setCoffeeM(machine.getCoffeeM() - wantedCups * coffeeType.getCoffeeM());
            machine.setDisposableCups(machine.getDisposableCups() - wantedCups);
            machine.setStoredMoney(machine.getStoredMoney() +  wantedCups * coffeeType.getCost());
        }
        private static void buyEspresso(){

        }
        private static void buyLatte(){

        }
        private static void buyCappuccino(){
        }

        private static void Fill(MachineOfCoffee machine){

            System.out.println("Write how many ml of water you want to add:");
            int waterV = 0;
            int milkV = 0;
            int coffeeM = 0;
            int disposableCups = 0;
            try {
                waterV = Integer.parseInt(scanner.nextLine().trim());
                System.out.println("Write how many ml of milk you want to add:");
                milkV = Integer.parseInt(scanner.nextLine().trim());
                System.out.println("Write how many grams of coffee beans you want to add:");
                coffeeM = Integer.parseInt(scanner.nextLine().trim());
                System.out.println("Write how many disposable cups of coffee you want to add:");
                disposableCups = Integer.parseInt(scanner.nextLine().trim());
            }
            catch (IllegalArgumentException e){
                System.out.println("enter a valid value");
            }
            machine.setWaterV(machine.getWaterV() + waterV);
            machine.setMilkV(machine.getMilkV() + milkV);
            machine.setCoffeeM(machine.getCoffeeM() + coffeeM);
            machine.setDisposableCups(machine.getDisposableCups() + disposableCups);
        }

        private static void Take(MachineOfCoffee machine){
            if (machine.getStoredMoney() > 0){
                System.out.println("I gave you $" + machine.getStoredMoney());
                machine.setStoredMoney(0);
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement#comment
status: Solved
feedback:
  message: Well done! You finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 08 Jun 2021 20:57:18 UTC
record: -1
